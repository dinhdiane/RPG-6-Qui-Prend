package View;

import java.awt.BorderLayout;
import java.awt.event.MouseEvent;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import Model.Joueur;
import System.Partie;

public class FenetrePrincipal extends javax.swing.JFrame {
    /**
     * Creates new form FenetrePrincipal
     */
    public FenetrePrincipal() {
        initComponents();
        URL url_tmp = getClass().getResource("/images/logo 6QuiPrend.png");
        if(url_tmp!=null) setIconImage(new ImageIcon(url_tmp).getImage());
        setLayout(new BorderLayout());
        setLocationRelativeTo(null);

        url_tmp = getClass().getResource("/images/fond 6QuiPrend.png");
        ImageIcon img = new ImageIcon(url_tmp);
        JLabel background = new JLabel("",img,JLabel.CENTER);
        background.setBounds(0,0,1080,720);
        add(background);

        fenetrePrincipalM = this;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel14 = new javax.swing.JLabel();
        m2 = new javax.swing.JLabel();
        m3 = new javax.swing.JLabel();
        m4 = new javax.swing.JLabel();
        m5 = new javax.swing.JLabel();
        m6 = new javax.swing.JLabel();
        L11 = new javax.swing.JLabel();
        L12 = new javax.swing.JLabel();
        L13 = new javax.swing.JLabel();
        L14 = new javax.swing.JLabel();
        L15 = new javax.swing.JLabel();
        L16 = new javax.swing.JLabel();
        L41 = new javax.swing.JLabel();
        L42 = new javax.swing.JLabel();
        L43 = new javax.swing.JLabel();
        L44 = new javax.swing.JLabel();
        L45 = new javax.swing.JLabel();
        L46 = new javax.swing.JLabel();
        L31 = new javax.swing.JLabel();
        L32 = new javax.swing.JLabel();
        L33 = new javax.swing.JLabel();
        L34 = new javax.swing.JLabel();
        L35 = new javax.swing.JLabel();
        L36 = new javax.swing.JLabel();
        L21 = new javax.swing.JLabel();
        L22 = new javax.swing.JLabel();
        L23 = new javax.swing.JLabel();
        L24 = new javax.swing.JLabel();
        L25 = new javax.swing.JLabel();
        L26 = new javax.swing.JLabel();
        m7 = new javax.swing.JLabel();
        m8 = new javax.swing.JLabel();
        m9 = new javax.swing.JLabel();
        m10 = new javax.swing.JLabel();
        m1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nom1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tete1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        manche1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        s1 = new javax.swing.JLabel();
        p1 = new javax.swing.JLabel();
        manche2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        s2 = new javax.swing.JLabel();
        p2 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        nom2 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        tete2 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        d1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nbC = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        j2nbcarte = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("6 qui prend");
        setBackground(new java.awt.Color(0, 0, 0));
        setBounds(new java.awt.Rectangle(0, 0, 1080, 720));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Harrington", 1, 14)); // NOI18N
        setForeground(new java.awt.Color(0, 0, 0));
        setSize(new java.awt.Dimension(0, 0));

        jLabel14.setBackground(new java.awt.Color(0, 0, 0));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/backside.png"))); // NOI18N
        jLabel14.setToolTipText("Distribuer les cartes");
        jLabel14.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 255, 0), new java.awt.Color(204, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(51, 51, 51)), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 204), new java.awt.Color(255, 255, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0))));
        jLabel14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });

        m2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        m2.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        m2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m2MouseClicked(evt);
            }
        });

        m3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        m3.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        m3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m3MouseClicked(evt);
            }
        });

        m4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        m4.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        m4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m4MouseClicked(evt);
            }
        });

        m5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        m5.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        m5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m5MouseClicked(evt);
            }
        });

        m6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        m6.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        m6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m6MouseClicked(evt);
            }
        });

        L11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L11.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L12.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L13.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L14.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L15.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L16.setBackground(new java.awt.Color(255, 255, 255));
        L16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L16.setText("10");
        L16.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L41.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L42.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L43.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L43.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L44.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L44.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L45.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L45.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L46.setBackground(new java.awt.Color(255, 255, 255));
        L46.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L46.setText("10");
        L46.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L31.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L32.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L33.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L34.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L35.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L36.setBackground(new java.awt.Color(255, 255, 255));
        L36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L36.setText("10");
        L36.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L21.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L22.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L23.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L24.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        L25.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        L26.setBackground(new java.awt.Color(255, 255, 255));
        L26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L26.setText("10");
        L26.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        m7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        m7.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        m7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m7MouseClicked(evt);
            }
        });

        m8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        m8.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        m8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m8MouseClicked(evt);
            }
        });

        m9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        m9.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        m9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m9MouseClicked(evt);
            }
        });

        m10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        m10.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        m10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m10MouseClicked(evt);
            }
        });

        m1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        m1.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        m1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        m1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                m1MouseEntered(evt);
            }
        });

        jLabel1.setText("joueur 1");

        nom1.setText("Joueur");

        jLabel3.setText("Nombre de tête");

        tete1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tete1.setText("0");

        jLabel5.setText("Manche");

        manche1.setText("1");

        jLabel7.setText("/10");

        jLabel8.setText("statut");

        s1.setText("RAS");

        p1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        p1.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        manche2.setText("1");

        jLabel11.setText("/10");

        jLabel12.setText("statut");

        s2.setText("RAS");

        p2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        p2.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        jLabel51.setText("Joueur 2");

        nom2.setText("Joueur");

        jLabel53.setText("Nombre de tête");

        tete2.setText("0");

        jLabel55.setText("Manche");

        d1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png"))); // NOI18N
        d1.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Votre main");

        nbC.setText("104");

        jLabel6.setText("/ 104");

        jLabel4.setText("NB TOTAL DE TETE");

        j2nbcarte.setText("10");

        jLabel10.setText("/ 10");

        jMenu1.setText("Partie");

        jMenuItem1.setText("Nouvelle partie");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Quitter");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Aide");

        jMenuItem3.setText("Règles");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(nbC)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel6)
                                                .addGap(102, 102, 102)
                                                .addComponent(jLabel2)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel1)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(nom1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel3)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(tete1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(jLabel5)
                                                                                        .addComponent(jLabel8))
                                                                                .addGap(18, 18, 18)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                                        .addGroup(layout.createSequentialGroup()
                                                                                                .addComponent(manche1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(jLabel7))
                                                                                        .addComponent(s1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                        .addComponent(p1))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addGroup(layout.createSequentialGroup()
                                                                                                .addComponent(L11)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(L12)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(L13)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(L14)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(L15))
                                                                                        .addGroup(layout.createSequentialGroup()
                                                                                                .addComponent(L21)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(L22)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(L23)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(L24)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(L25)))
                                                                                .addGap(64, 64, 64)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                        .addComponent(jLabel4)
                                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                                                        .addComponent(L16, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                        .addComponent(L26, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                        .addComponent(L36, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                        .addComponent(L46, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                                .addGap(33, 33, 33))))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(L31)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(L32)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(L33)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(L34)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(L35))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(L41)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(L42)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(L43)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(L44)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(L45)))
                                                                .addGap(42, 42, 42))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel14)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                                                                .addComponent(m1)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(m2)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(m3)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(m4)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(m5)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(m6)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(m7)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(m8)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(m9)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(m10))
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(jLabel51)
                                                                        .addGap(18, 18, 18)
                                                                        .addComponent(nom2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(jLabel53)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(tete2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(jLabel55)
                                                                                .addComponent(jLabel12))
                                                                        .addGap(18, 18, 18)
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(s2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addGroup(layout.createSequentialGroup()
                                                                                        .addComponent(manche2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                        .addComponent(jLabel11))))
                                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                                .addComponent(p2)
                                                                                .addComponent(d1)
                                                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                                        .addGap(24, 24, 24)
                                                                                        .addComponent(j2nbcarte)
                                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                        .addComponent(jLabel10)))
                                                                        .addGap(27, 27, 27))))
                                                .addContainerGap(12, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(m6)
                                        .addComponent(m5)
                                        .addComponent(m4)
                                        .addComponent(m3)
                                        .addComponent(m2)
                                        .addComponent(jLabel14)
                                        .addComponent(m10)
                                        .addComponent(m9)
                                        .addComponent(m8)
                                        .addComponent(m7)
                                        .addComponent(m1))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(36, 36, 36)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(L15)
                                                        .addComponent(L14)
                                                        .addComponent(L13)
                                                        .addComponent(L12)
                                                        .addComponent(L11))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(L25)
                                                        .addComponent(L24)
                                                        .addComponent(L23)
                                                        .addComponent(L22)
                                                        .addComponent(L21))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(L35)
                                                        .addComponent(L34)
                                                        .addComponent(L33)
                                                        .addComponent(L32)
                                                        .addComponent(L31))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(L45)
                                                        .addComponent(L44)
                                                        .addComponent(L43)
                                                        .addComponent(L42)
                                                        .addComponent(L41))
                                                .addGap(12, 12, 12))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(10, 10, 10)
                                                                .addComponent(jLabel2))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(6, 6, 6)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(nbC)
                                                                        .addComponent(jLabel6))))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(23, 23, 23)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jLabel1)
                                                                        .addComponent(nom1))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jLabel3)
                                                                        .addComponent(tete1))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jLabel5)
                                                                        .addComponent(manche1)
                                                                        .addComponent(jLabel7))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jLabel8)
                                                                        .addComponent(s1))
                                                                .addGap(192, 192, 192)
                                                                .addComponent(p1))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(29, 29, 29)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jLabel51)
                                                                        .addComponent(nom2)
                                                                        .addComponent(jLabel4))
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jLabel53)
                                                                                        .addComponent(tete2))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jLabel55)
                                                                                        .addComponent(manche2)
                                                                                        .addComponent(jLabel11))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jLabel12)
                                                                                        .addComponent(s2)))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(17, 17, 17)
                                                                                .addComponent(L16, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(d1)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(64, 64, 64)
                                                                                .addComponent(L26, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(4, 4, 4)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(j2nbcarte)
                                                                                        .addComponent(jLabel10))
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(p2))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(69, 69, 69)
                                                                                .addComponent(L36, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(L46, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(59, 59, 59))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        VuePartie dialog = new VuePartie(new FenetrePrincipal(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                System.exit(0);
            }
        });
        dialog.setVisible(true);   // TODO add your handling code here:
        nom1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getNom());
        nom2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getNom());
        L11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L43.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L44.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        L45.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        m1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        m2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        m3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        m4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        m5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        m6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        m7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        m8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        m9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        m10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));

        manche1.setText("1");
        manche2.setText("1");

        nbC.setText("104");

        d1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));

        p1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
        p2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cards/carteVide.png")));

        L16.setText("0");
        L26.setText("0");
        L36.setText("0");
        L46.setText("0");

        tete1.setText("0");
        tete2.setText("0");

        s1.setText("RAS");
        s2.setText("RAS");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        Regle6 dialog = new Regle6(new javax.swing.JFrame(), true);
        dialog.setVisible(true);       // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jLabel14MouseClicked(MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        // TODO add your handling code here:
        if(fenetrePrincipalM.getPartieEncours()==null){
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Veuillez d'abord créer une nouvelle partie !", "Erreur Créer nouvelle partie",
                    JOptionPane.ERROR_MESSAGE);
        }else
        {
            if(fenetrePrincipalM.getPartieEncours().getPartieDemarrer()=="true"){
                JOptionPane.showMessageDialog(fenetrePrincipalM, "Veuillez d'abord créer une nouvelle partie !", "Erreur Créer nouvelle partie",
                        JOptionPane.ERROR_MESSAGE);
            }else
            {

                fenetrePrincipalM.getPartieEncours().initializerPartie(fenetrePrincipalM.getPartieEncours());
                fenetrePrincipalM.getPartieEncours().setPartieDemarrer("true");
                fenetrePrincipalM.getPartieEncours().ajouterManche();
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                nbC.setText(""+fenetrePrincipalM.getPartieEncours().getPaquet().size()+"");
                L11.setIcon(fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(0).get(0).getImage());
                L21.setIcon(fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(1).get(0).getImage());
                L31.setIcon(fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(2).get(0).getImage());
                L41.setIcon(fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(3).get(0).getImage());
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

                m1.setIcon(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getListeCarte().get(0).getImage());
                m2.setIcon(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getListeCarte().get(1).getImage());
                m3.setIcon(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getListeCarte().get(2).getImage());
                m4.setIcon(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getListeCarte().get(3).getImage());
                m5.setIcon(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getListeCarte().get(4).getImage());
                m6.setIcon(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getListeCarte().get(5).getImage());
                m7.setIcon(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getListeCarte().get(6).getImage());
                m8.setIcon(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getListeCarte().get(7).getImage());
                m9.setIcon(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getListeCarte().get(8).getImage());
                m10.setIcon(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getListeCarte().get(9).getImage());


                d1.setIcon(new ImageIcon(getClass().getResource("/images/cards/backside.png")));

                JOptionPane.showMessageDialog(FenetrePrincipal.this,
                        "Les cartes on été mélangées et distribuées ! \n Veuillez choisir une carte.",
                        "Notification",
                        JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }//GEN-LAST:event_jLabel14MouseClicked

    private void m1MouseClicked(MouseEvent evt) {//GEN-FIRST:event_m1MouseClicked
        // TODO add your handling code here:

        String example =m1.getIcon().toString();
        String nomImg = example.substring(example.lastIndexOf("/") + 1);
        if(nomImg.compareToIgnoreCase("carteVide.png")==0){
            System.out.println("Carte vide");
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Choisir une case non vide", "Emplacement vide",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(0,0);
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(0,1);
            m1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
            p1.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(0).getImage());
            p2.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(1).getImage());
            ArrayList<Joueur> joueursClasser = fenetrePrincipalM.getPartieEncours().classerJoueur();
            int i=0;
            int pos=-1;
            System.out.println("Ok");
            for(Joueur joueur : joueursClasser){
                System.out.println(joueur.toString());
                if(joueur.getPosition()==1){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                if(joueur.getPosition()==2){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                pos= fenetrePrincipalM.getPartieEncours().choixDeLigne(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));

                System.out.println(pos);
                if(pos==-1){

                    LigneChoisie dialog = new LigneChoisie(fenetrePrincipalM, true);
                    dialog.setVisible(true);
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(fenetrePrincipalM.getPartieEncours().getLigneChoisie());

                    joueur.ajouterNbTete(nbTete);
                    String tete=""+joueur.getNbTete();
                    if(joueur.getPosition()==1){
                        tete1.setText(tete);
                    }
                    if(joueur.getPosition()==2){
                        tete2.setText(tete);
                    }
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).clear();
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).add(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));
                    pos =fenetrePrincipalM.getPartieEncours().getLigneChoisie();
                    int col =0;
                    String cas="L"+pos+col;
                    switch (cas) {
                        case "L00":
                            L11.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L12.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L13.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L14.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L15.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L10":
                            L21.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L22.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L23.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L24.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L25.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L20":
                            L31.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L32.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L33.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L34.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L35.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L30":
                            L41.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L42.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L43.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L44.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L45.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        default:
                            System.out.println("Erreur");
                    }

                }else{
                    int col=fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(pos).size()-1;
                    String cas="L"+pos+col;
                    System.out.println(cas);
                    System.out.println(pos);
                    System.out.println(col);
                    switch (cas) {
                        case "L00":
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L01":
                            L12.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L02":
                            L13.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L03":
                            L14.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L04":
                            L15.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L10":
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L11":
                            L22.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L12":
                            L23.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L13":
                            L24.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L14":
                            L25.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L20":
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L21":
                            L32.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L22":
                            L33.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L23":
                            L34.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L24":
                            L35.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L30":
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L31":
                            L42.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L32":
                            L43.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L33":
                            L44.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L34":
                            L45.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        default:
                            System.out.println("Erreur");
                    }
                }
                i++;
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    joueur.ajouterNbTete(nbTete);
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

            }
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().ajouterManche();
            if(fenetrePrincipalM.getPartieEncours().getManche()>10){
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
            }
            if(fenetrePrincipalM.getPartieEncours().partieTerminer()){
                fenetrePrincipalM.getPartieEncours().setJoueurGagnant();
                if(fenetrePrincipalM.getPartieEncours().getGagnant()==""){
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Egalité", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }
                else{
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Gagnant : \n "+fenetrePrincipalM.getPartieEncours().getGagnant()+"", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }

            }
        }
    }//GEN-LAST:event_m1MouseClicked

    private void m2MouseClicked(MouseEvent evt) {//GEN-FIRST:event_m2MouseClicked
        // TODO add your handling code here:
        String example =m2.getIcon().toString();
        String nomImg = example.substring(example.lastIndexOf("/") + 1);
        if(nomImg.compareToIgnoreCase("carteVide.png")==0){
            System.out.println("Carte vide");
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Choisir une case non vide", "Emplacement vide",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(1,0);
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(1,1);
            m2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
            p1.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(0).getImage());
            p2.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(1).getImage());
            ArrayList<Joueur> joueursClasser = fenetrePrincipalM.getPartieEncours().classerJoueur();
            int i=0;
            int pos=-1;
            System.out.println("ok");
            for(Joueur joueur : joueursClasser){
                System.out.println(joueur.toString());
                if(joueur.getPosition()==1){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée !",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                if(joueur.getPosition()==2){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée !",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                pos= fenetrePrincipalM.getPartieEncours().choixDeLigne(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));

                System.out.println(pos);
                if(pos==-1){

                    LigneChoisie dialog = new LigneChoisie(fenetrePrincipalM, true);
                    dialog.setVisible(true);
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(fenetrePrincipalM.getPartieEncours().getLigneChoisie());

                    joueur.ajouterNbTete(nbTete);
                    String tete=""+joueur.getNbTete();
                    if(joueur.getPosition()==1){
                        tete1.setText(tete);
                    }
                    if(joueur.getPosition()==2){
                        tete2.setText(tete);
                    }
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).clear();
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).add(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));
                    pos =fenetrePrincipalM.getPartieEncours().getLigneChoisie();
                    int col =0;
                    String cas="L"+pos+col;
                    switch (cas) {
                        case "L00":
                            L11.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L12.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L13.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L14.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L15.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L10":
                            L21.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L22.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L23.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L24.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L25.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L20":
                            L31.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L32.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L33.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L34.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L35.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L30":
                            L41.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L42.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L43.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L44.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L45.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        default:
                            System.out.println("Erreur");
                    }

                }else{
                    int col=fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(pos).size()-1;
                    String cas="L"+pos+col;
                    System.out.println(cas);
                    System.out.println(pos);
                    System.out.println(col);
                    switch (cas) {
                        case "L00":
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L01":
                            L12.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L02":
                            L13.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L03":
                            L14.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L04":
                            L15.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L10":
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L11":
                            L22.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L12":
                            L23.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L13":
                            L24.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L14":
                            L25.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L20":
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L21":
                            L32.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L22":
                            L33.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L23":
                            L34.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L24":
                            L35.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L30":
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L31":
                            L42.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L32":
                            L43.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L33":
                            L44.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L34":
                            L45.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        default:
                            System.out.println("Erreur");
                    }
                }
                i++;
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    joueur.ajouterNbTete(nbTete);
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

            }
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().ajouterManche();
            if(fenetrePrincipalM.getPartieEncours().getManche()>10){
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
            }
            if(fenetrePrincipalM.getPartieEncours().partieTerminer()){
                fenetrePrincipalM.getPartieEncours().setJoueurGagnant();
                if(fenetrePrincipalM.getPartieEncours().getGagnant()==""){
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Egalité", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }
                else{
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Gagnant : \n "+fenetrePrincipalM.getPartieEncours().getGagnant()+"", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }

            }
        }

    }//GEN-LAST:event_m2MouseClicked

    private void m3MouseClicked(MouseEvent evt) {//GEN-FIRST:event_m3MouseClicked
        // TODO add your handling code here:
        String example =m3.getIcon().toString();
        String nomImg = example.substring(example.lastIndexOf("/") + 1);
        if(nomImg.compareToIgnoreCase("carteVide.png")==0){
            System.out.println("Carte vide");
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Choisir une case non vide", "Emplacement vide",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(2,0);
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(2,1);
            m3.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
            p1.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(0).getImage());
            p2.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(1).getImage());
            ArrayList<Joueur> joueursClasser = fenetrePrincipalM.getPartieEncours().classerJoueur();
            int i=0;
            int pos=-1;
            System.out.println("ok");
            for(Joueur joueur : joueursClasser){
                System.out.println(joueur.toString());
                if(joueur.getPosition()==1){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée !",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                if(joueur.getPosition()==2){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée !",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                pos= fenetrePrincipalM.getPartieEncours().choixDeLigne(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));

                System.out.println(pos);
                if(pos==-1){

                    LigneChoisie dialog = new LigneChoisie(fenetrePrincipalM, true);
                    dialog.setVisible(true);
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(fenetrePrincipalM.getPartieEncours().getLigneChoisie());

                    joueur.ajouterNbTete(nbTete);
                    String tete=""+joueur.getNbTete();
                    if(joueur.getPosition()==1){
                        tete1.setText(tete);
                    }
                    if(joueur.getPosition()==2){
                        tete2.setText(tete);
                    }
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).clear();
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).add(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));
                    pos =fenetrePrincipalM.getPartieEncours().getLigneChoisie();
                    int col =0;
                    String cas="L"+pos+col;
                    switch (cas) {
                        case "L00":
                            L11.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L12.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L13.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L14.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L15.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L10":
                            L21.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L22.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L23.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L24.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L25.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L20":
                            L31.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L32.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L33.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L34.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L35.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L30":
                            L41.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L42.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L43.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L44.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L45.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        default:
                            System.out.println("error");
                    }

                }else{
                    int col=fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(pos).size()-1;
                    String cas="L"+pos+col;
                    System.out.println(cas);
                    System.out.println(pos);
                    System.out.println(col);
                    switch (cas) {
                        case "L00":
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L01":
                            L12.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L02":
                            L13.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L03":
                            L14.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L04":
                            L15.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L10":
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L11":
                            L22.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L12":
                            L23.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L13":
                            L24.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L14":
                            L25.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L20":
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L21":
                            L32.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L22":
                            L33.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L23":
                            L34.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L24":
                            L35.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L30":
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L31":
                            L42.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L32":
                            L43.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L33":
                            L44.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L34":
                            L45.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        default:
                            System.out.println("Erreur");
                    }
                }
                i++;
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    joueur.ajouterNbTete(nbTete);
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

            }
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().ajouterManche();
            if(fenetrePrincipalM.getPartieEncours().getManche()>10){
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
            }
            if(fenetrePrincipalM.getPartieEncours().partieTerminer()){
                fenetrePrincipalM.getPartieEncours().setJoueurGagnant();
                if(fenetrePrincipalM.getPartieEncours().getGagnant()==""){
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Egalité !", "Partie Terminée.",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }
                else{
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Gagnant : \n "+fenetrePrincipalM.getPartieEncours().getGagnant()+"", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }

            }
        }
    }//GEN-LAST:event_m3MouseClicked

    private void m4MouseClicked(MouseEvent evt) {//GEN-FIRST:event_m4MouseClicked
        // TODO add your handling code here:
        String example =m4.getIcon().toString();
        String nomImg = example.substring(example.lastIndexOf("/") + 1);
        if(nomImg.compareToIgnoreCase("carteVide.png")==0){
            System.out.println("Carte vide");
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Choisir une case non vide", "Emplacement vide",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(3,0);
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(3,1);
            m4.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
            p1.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(0).getImage());
            p2.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(1).getImage());
            ArrayList<Joueur> joueursClasser = fenetrePrincipalM.getPartieEncours().classerJoueur();
            int i=0;
            int pos=-1;
            System.out.println("ok");
            for(Joueur joueur : joueursClasser){
                System.out.println(joueur.toString());
                if(joueur.getPosition()==1){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                if(joueur.getPosition()==2){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée !",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                pos= fenetrePrincipalM.getPartieEncours().choixDeLigne(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));

                System.out.println(pos);
                if(pos==-1){

                    LigneChoisie dialog = new LigneChoisie(fenetrePrincipalM, true);
                    dialog.setVisible(true);
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(fenetrePrincipalM.getPartieEncours().getLigneChoisie());

                    joueur.ajouterNbTete(nbTete);
                    String tete=""+joueur.getNbTete();
                    if(joueur.getPosition()==1){
                        tete1.setText(tete);
                    }
                    if(joueur.getPosition()==2){
                        tete2.setText(tete);
                    }
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).clear();
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).add(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));
                    pos =fenetrePrincipalM.getPartieEncours().getLigneChoisie();
                    int col =0;
                    String cas="L"+pos+col;
                    switch (cas) {
                        case "L00":
                            L11.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L12.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L13.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L14.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L15.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L10":
                            L21.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L22.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L23.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L24.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L25.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L20":
                            L31.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L32.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L33.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L34.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L35.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L30":
                            L41.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L42.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L43.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L44.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L45.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        default:
                            System.out.println("Erreur");
                    }

                }else{
                    int col=fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(pos).size()-1;
                    String cas="L"+pos+col;
                    System.out.println(cas);
                    System.out.println(pos);
                    System.out.println(col);
                    switch (cas) {
                        case "L00":
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L01":
                            L12.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L02":
                            L13.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L03":
                            L14.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L04":
                            L15.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L10":
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L11":
                            L22.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L12":
                            L23.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L13":
                            L24.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L14":
                            L25.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L20":
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L21":
                            L32.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L22":
                            L33.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L23":
                            L34.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L24":
                            L35.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L30":
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L31":
                            L42.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L32":
                            L43.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L33":
                            L44.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L34":
                            L45.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        default:
                            System.out.println("Erreur");
                    }
                }
                i++;
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    joueur.ajouterNbTete(nbTete);
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

            }
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().ajouterManche();
            if(fenetrePrincipalM.getPartieEncours().getManche()>10){
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
            }
            if(fenetrePrincipalM.getPartieEncours().partieTerminer()){
                fenetrePrincipalM.getPartieEncours().setJoueurGagnant();
                if(fenetrePrincipalM.getPartieEncours().getGagnant()==""){
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Egalité", "Partie Terminée",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }
                else{
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Gagnant : \n "+fenetrePrincipalM.getPartieEncours().getGagnant()+"", "Partie Terminée",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }

            }
        }
    }//GEN-LAST:event_m4MouseClicked

    private void m5MouseClicked(MouseEvent evt) {//GEN-FIRST:event_m5MouseClicked
        // TODO add your handling code here:
        String example =m5.getIcon().toString();
        String nomImg = example.substring(example.lastIndexOf("/") + 1);
        if(nomImg.compareToIgnoreCase("carteVide.png")==0){
            System.out.println("Carte vide");
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Choisir une case non vide", "Emplacement vide",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(4,0);
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(4,1);
            m5.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
            p1.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(0).getImage());
            p2.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(1).getImage());
            ArrayList<Joueur> joueursClasser = fenetrePrincipalM.getPartieEncours().classerJoueur();
            int i=0;
            int pos=-1;
            System.out.println("ok");
            for(Joueur joueur : joueursClasser){
                System.out.println(joueur.toString());
                if(joueur.getPosition()==1){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                if(joueur.getPosition()==2){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                pos= fenetrePrincipalM.getPartieEncours().choixDeLigne(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));

                System.out.println(pos);
                if(pos==-1){

                    LigneChoisie dialog = new LigneChoisie(fenetrePrincipalM, true);
                    dialog.setVisible(true);
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(fenetrePrincipalM.getPartieEncours().getLigneChoisie());

                    joueur.ajouterNbTete(nbTete);
                    String tete=""+joueur.getNbTete();
                    if(joueur.getPosition()==1){
                        tete1.setText(tete);
                    }
                    if(joueur.getPosition()==2){
                        tete2.setText(tete);
                    }
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).clear();
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).add(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));
                    pos =fenetrePrincipalM.getPartieEncours().getLigneChoisie();
                    int col =0;
                    String cas="L"+pos+col;
                    switch (cas) {
                        case "L00":
                            L11.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L12.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L13.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L14.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L15.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L10":
                            L21.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L22.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L23.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L24.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L25.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L20":
                            L31.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L32.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L33.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L34.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L35.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L30":
                            L41.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L42.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L43.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L44.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L45.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        default:
                            System.out.println("Erreur");
                    }

                }else{
                    int col=fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(pos).size()-1;
                    String cas="L"+pos+col;
                    System.out.println(cas);
                    System.out.println(pos);
                    System.out.println(col);
                    switch (cas) {
                        case "L00":
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L01":
                            L12.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L02":
                            L13.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L03":
                            L14.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L04":
                            L15.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L10":
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L11":
                            L22.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L12":
                            L23.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L13":
                            L24.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L14":
                            L25.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L20":
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L21":
                            L32.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L22":
                            L33.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L23":
                            L34.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L24":
                            L35.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L30":
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L31":
                            L42.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L32":
                            L43.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L33":
                            L44.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L34":
                            L45.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        default:
                            System.out.println("Erreur");
                    }
                }
                i++;
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    joueur.ajouterNbTete(nbTete);
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

            }
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().ajouterManche();
            if(fenetrePrincipalM.getPartieEncours().getManche()>10){
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
            }
            if(fenetrePrincipalM.getPartieEncours().partieTerminer()){
                fenetrePrincipalM.getPartieEncours().setJoueurGagnant();
                if(fenetrePrincipalM.getPartieEncours().getGagnant()==""){
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Egalité", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }
                else{
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Gagnant : \n "+fenetrePrincipalM.getPartieEncours().getGagnant()+"", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }

            }
        }
    }//GEN-LAST:event_m5MouseClicked

    private void m6MouseClicked(MouseEvent evt) {//GEN-FIRST:event_m6MouseClicked
        // TODO add your handling code here:
        String example =m6.getIcon().toString();
        String nomImg = example.substring(example.lastIndexOf("/") + 1);
        if(nomImg.compareToIgnoreCase("carteVide.png")==0){
            System.out.println("Carte vide");
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Choisir une case non vide", "Emplacement vide",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(5,0);
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(5,1);
            m6.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
            p1.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(0).getImage());
            p2.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(1).getImage());
            ArrayList<Joueur> joueursClasser = fenetrePrincipalM.getPartieEncours().classerJoueur();
            int i=0;
            int pos=-1;
            System.out.println("ok");
            for(Joueur joueur : joueursClasser){
                System.out.println(joueur.toString());
                if(joueur.getPosition()==1){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                if(joueur.getPosition()==2){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                pos= fenetrePrincipalM.getPartieEncours().choixDeLigne(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));

                System.out.println(pos);
                if(pos==-1){

                    LigneChoisie dialog = new LigneChoisie(fenetrePrincipalM, true);
                    dialog.setVisible(true);
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(fenetrePrincipalM.getPartieEncours().getLigneChoisie());

                    joueur.ajouterNbTete(nbTete);
                    String tete=""+joueur.getNbTete();
                    if(joueur.getPosition()==1){
                        tete1.setText(tete);
                    }
                    if(joueur.getPosition()==2){
                        tete2.setText(tete);
                    }
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).clear();
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).add(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));
                    pos =fenetrePrincipalM.getPartieEncours().getLigneChoisie();
                    int col =0;
                    String cas="L"+pos+col;
                    switch (cas) {
                        case "L00":
                            L11.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L12.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L13.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L14.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L15.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L10":
                            L21.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L22.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L23.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L24.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L25.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L20":
                            L31.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L32.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L33.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L34.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L35.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L30":
                            L41.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L42.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L43.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L44.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L45.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        default:
                            System.out.println("Erreur");
                    }

                }else{
                    int col=fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(pos).size()-1;
                    String cas="L"+pos+col;
                    System.out.println(cas);
                    System.out.println(pos);
                    System.out.println(col);
                    switch (cas) {
                        case "L00":
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L01":
                            L12.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L02":
                            L13.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L03":
                            L14.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L04":
                            L15.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L10":
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L11":
                            L22.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L12":
                            L23.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L13":
                            L24.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L14":
                            L25.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L20":
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L21":
                            L32.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L22":
                            L33.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L23":
                            L34.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L24":
                            L35.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L30":
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L31":
                            L42.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L32":
                            L43.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L33":
                            L44.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L34":
                            L45.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        default:
                            System.out.println("Erreur");
                    }
                }
                i++;
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    joueur.ajouterNbTete(nbTete);
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

            }
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().ajouterManche();
            if(fenetrePrincipalM.getPartieEncours().getManche()>10){
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
            }
            if(fenetrePrincipalM.getPartieEncours().partieTerminer()){
                fenetrePrincipalM.getPartieEncours().setJoueurGagnant();
                if(fenetrePrincipalM.getPartieEncours().getGagnant()==""){
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Egalité", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }
                else{
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Gagnant : \n "+fenetrePrincipalM.getPartieEncours().getGagnant()+"", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }

            }
        }
    }//GEN-LAST:event_m6MouseClicked

    private void m7MouseClicked(MouseEvent evt) {//GEN-FIRST:event_m7MouseClicked
        // TODO add your handling code here:
        String example =m7.getIcon().toString();
        String nomImg = example.substring(example.lastIndexOf("/") + 1);
        if(nomImg.compareToIgnoreCase("carteVide.png")==0){
            System.out.println("Carte vide");
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Choisir une case non vide", "Emplacement vide",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(6,0);
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(6,1);
            m7.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
            p1.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(0).getImage());
            p2.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(1).getImage());
            ArrayList<Joueur> joueursClasser = fenetrePrincipalM.getPartieEncours().classerJoueur();
            int i=0;
            int pos=-1;
            System.out.println("ok");
            for(Joueur joueur : joueursClasser){
                System.out.println(joueur.toString());
                if(joueur.getPosition()==1){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                if(joueur.getPosition()==2){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée !",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                pos= fenetrePrincipalM.getPartieEncours().choixDeLigne(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));

                System.out.println(pos);
                if(pos==-1){

                    LigneChoisie dialog = new LigneChoisie(fenetrePrincipalM, true);
                    dialog.setVisible(true);
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(fenetrePrincipalM.getPartieEncours().getLigneChoisie());

                    joueur.ajouterNbTete(nbTete);
                    String tete=""+joueur.getNbTete();
                    if(joueur.getPosition()==1){
                        tete1.setText(tete);
                    }
                    if(joueur.getPosition()==2){
                        tete2.setText(tete);
                    }
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).clear();
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).add(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));
                    pos =fenetrePrincipalM.getPartieEncours().getLigneChoisie();
                    int col =0;
                    String cas="L"+pos+col;
                    switch (cas) {
                        case "L00":
                            L11.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L12.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L13.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L14.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L15.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L10":
                            L21.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L22.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L23.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L24.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L25.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L20":
                            L31.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L32.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L33.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L34.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L35.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L30":
                            L41.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L42.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L43.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L44.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L45.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        default:
                            System.out.println("Erreur");
                    }

                }else{
                    int col=fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(pos).size()-1;
                    String cas="L"+pos+col;
                    System.out.println(cas);
                    System.out.println(pos);
                    System.out.println(col);
                    switch (cas) {
                        case "L00":
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L01":
                            L12.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L02":
                            L13.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L03":
                            L14.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L04":
                            L15.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L10":
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L11":
                            L22.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L12":
                            L23.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L13":
                            L24.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L14":
                            L25.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L20":
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L21":
                            L32.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L22":
                            L33.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L23":
                            L34.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L24":
                            L35.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L30":
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L31":
                            L42.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L32":
                            L43.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L33":
                            L44.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L34":
                            L45.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        default:
                            System.out.println("error");
                    }
                }
                i++;
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    joueur.ajouterNbTete(nbTete);
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

            }
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().ajouterManche();
            if(fenetrePrincipalM.getPartieEncours().getManche()>10){
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
            }
            if(fenetrePrincipalM.getPartieEncours().partieTerminer()){
                fenetrePrincipalM.getPartieEncours().setJoueurGagnant();
                if(fenetrePrincipalM.getPartieEncours().getGagnant()==""){
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Egalité", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }
                else{
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Gagnant \n "+fenetrePrincipalM.getPartieEncours().getGagnant()+"", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }

            }
        }
    }//GEN-LAST:event_m7MouseClicked

    private void m8MouseClicked(MouseEvent evt) {//GEN-FIRST:event_m8MouseClicked
        // TODO add your handling code here:
        String example =m8.getIcon().toString();
        String nomImg = example.substring(example.lastIndexOf("/") + 1);
        if(nomImg.compareToIgnoreCase("carteVide.png")==0){
            System.out.println("Carte vide");
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Choisir une case non vide", "Emplacement vide",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(7,0);
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(7,1);
            m8.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
            p1.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(0).getImage());
            p2.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(1).getImage());
            ArrayList<Joueur> joueursClasser = fenetrePrincipalM.getPartieEncours().classerJoueur();
            int i=0;
            int pos=-1;
            System.out.println("ok");
            for(Joueur joueur : joueursClasser){
                System.out.println(joueur.toString());
                if(joueur.getPosition()==1){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                if(joueur.getPosition()==2){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                pos= fenetrePrincipalM.getPartieEncours().choixDeLigne(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));

                System.out.println(pos);
                if(pos==-1){

                    LigneChoisie dialog = new LigneChoisie(fenetrePrincipalM, true);
                    dialog.setVisible(true);
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(fenetrePrincipalM.getPartieEncours().getLigneChoisie());

                    joueur.ajouterNbTete(nbTete);
                    String tete=""+joueur.getNbTete();
                    if(joueur.getPosition()==1){
                        tete1.setText(tete);
                    }
                    if(joueur.getPosition()==2){
                        tete2.setText(tete);
                    }
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).clear();
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).add(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));
                    pos =fenetrePrincipalM.getPartieEncours().getLigneChoisie();
                    int col =0;
                    String cas="L"+pos+col;
                    switch (cas) {
                        case "L00":
                            L11.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L12.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L13.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L14.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L15.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L10":
                            L21.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L22.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L23.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L24.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L25.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L20":
                            L31.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L32.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L33.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L34.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L35.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L30":
                            L41.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L42.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L43.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L44.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L45.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        default:
                            System.out.println("Erreur");
                    }

                }else{
                    int col=fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(pos).size()-1;
                    String cas="L"+pos+col;
                    System.out.println(cas);
                    System.out.println(pos);
                    System.out.println(col);
                    switch (cas) {
                        case "L00":
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L01":
                            L12.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L02":
                            L13.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L03":
                            L14.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L04":
                            L15.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L10":
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L11":
                            L22.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L12":
                            L23.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L13":
                            L24.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L14":
                            L25.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L20":
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L21":
                            L32.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L22":
                            L33.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L23":
                            L34.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L24":
                            L35.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L30":
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L31":
                            L42.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L32":
                            L43.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L33":
                            L44.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L34":
                            L45.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        default:
                            System.out.println("Erreur");
                    }
                }
                i++;
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    joueur.ajouterNbTete(nbTete);
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

            }
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().ajouterManche();
            if(fenetrePrincipalM.getPartieEncours().getManche()>10){
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
            }
            if(fenetrePrincipalM.getPartieEncours().partieTerminer()){
                fenetrePrincipalM.getPartieEncours().setJoueurGagnant();
                if(fenetrePrincipalM.getPartieEncours().getGagnant()==""){
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Egalité", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }
                else{
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Gagnant : \n "+fenetrePrincipalM.getPartieEncours().getGagnant()+"", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }

            }
        }
    }//GEN-LAST:event_m8MouseClicked

    private void m9MouseClicked(MouseEvent evt) {//GEN-FIRST:event_m9MouseClicked
        // TODO add your handling code here:
        String example =m9.getIcon().toString();
        String nomImg = example.substring(example.lastIndexOf("/") + 1);
        if(nomImg.compareToIgnoreCase("carteVide.png")==0){
            System.out.println("Carte vide");
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Choisir une case non vide", "Emplacement vide",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(8,0);
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(8,1);
            m9.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
            p1.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(0).getImage());
            p2.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(1).getImage());
            ArrayList<Joueur> joueursClasser = fenetrePrincipalM.getPartieEncours().classerJoueur();
            int i=0;
            int pos=-1;
            System.out.println("ok");
            for(Joueur joueur : joueursClasser){
                System.out.println(joueur.toString());
                if(joueur.getPosition()==1){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée !",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                if(joueur.getPosition()==2){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée !",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                pos= fenetrePrincipalM.getPartieEncours().choixDeLigne(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));

                System.out.println(pos);
                if(pos==-1){

                    LigneChoisie dialog = new LigneChoisie(fenetrePrincipalM, true);
                    dialog.setVisible(true);
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(fenetrePrincipalM.getPartieEncours().getLigneChoisie());

                    joueur.ajouterNbTete(nbTete);
                    String tete=""+joueur.getNbTete();
                    if(joueur.getPosition()==1){
                        tete1.setText(tete);
                    }
                    if(joueur.getPosition()==2){
                        tete2.setText(tete);
                    }
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).clear();
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).add(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));
                    pos =fenetrePrincipalM.getPartieEncours().getLigneChoisie();
                    int col =0;
                    String cas="L"+pos+col;
                    switch (cas) {
                        case "L00":
                            L11.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L12.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L13.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L14.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L15.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L10":
                            L21.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L22.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L23.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L24.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L25.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L20":
                            L31.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L32.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L33.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L34.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L35.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L30":
                            L41.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L42.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L43.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L44.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L45.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        default:
                            System.out.println("Erreur");
                    }

                }else{
                    int col=fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(pos).size()-1;
                    String cas="L"+pos+col;
                    System.out.println(cas);
                    System.out.println(pos);
                    System.out.println(col);
                    switch (cas) {
                        case "L00":
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L01":
                            L12.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L02":
                            L13.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L03":
                            L14.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L04":
                            L15.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L10":
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L11":
                            L22.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L12":
                            L23.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L13":
                            L24.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L14":
                            L25.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L20":
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L21":
                            L32.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L22":
                            L33.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L23":
                            L34.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L24":
                            L35.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L30":
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L31":
                            L42.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L32":
                            L43.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L33":
                            L44.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L34":
                            L45.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        default:
                            System.out.println("Erreur");
                    }
                }
                i++;
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    joueur.ajouterNbTete(nbTete);
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

            }
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().ajouterManche();
            if(fenetrePrincipalM.getPartieEncours().getManche()>10){
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
            }
            if(fenetrePrincipalM.getPartieEncours().partieTerminer()){
                fenetrePrincipalM.getPartieEncours().setJoueurGagnant();
                if(fenetrePrincipalM.getPartieEncours().getGagnant()==""){
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Egalité", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }
                else{
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Gagnant : \n "+fenetrePrincipalM.getPartieEncours().getGagnant()+"", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }

            }
        }
    }//GEN-LAST:event_m9MouseClicked

    private void m10MouseClicked(MouseEvent evt) {//GEN-FIRST:event_m10MouseClicked
        // TODO add your handling code here:
        String example =m10.getIcon().toString();
        String nomImg = example.substring(example.lastIndexOf("/") + 1);
        if(nomImg.compareToIgnoreCase("carteVide.png")==0){
            System.out.println("Carte vide");
            JOptionPane.showMessageDialog(fenetrePrincipalM, "Choisir une case non vide", "Emplacement vide",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(9,0);
            fenetrePrincipalM.getPartieEncours().joueurCarteLigne(9,1);
            m10.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
            p1.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(0).getImage());
            p2.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(1).getImage());
            ArrayList<Joueur> joueursClasser = fenetrePrincipalM.getPartieEncours().classerJoueur();
            int i=0;
            int pos=-1;
            System.out.println("ok");
            for(Joueur joueur : joueursClasser){
                System.out.println(joueur.toString());
                if(joueur.getPosition()==1){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée !",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p1.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                if(joueur.getPosition()==2){
                    JOptionPane.showMessageDialog(FenetrePrincipal.this,
                            "Carte jouée !",
                            "Plus petite carte",
                            JOptionPane.INFORMATION_MESSAGE);
                    p2.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                }
                pos= fenetrePrincipalM.getPartieEncours().choixDeLigne(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));

                System.out.println(pos);
                if(pos==-1){

                    LigneChoisie dialog = new LigneChoisie(fenetrePrincipalM, true);
                    dialog.setVisible(true);
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(fenetrePrincipalM.getPartieEncours().getLigneChoisie());

                    joueur.ajouterNbTete(nbTete);
                    String tete=""+joueur.getNbTete();
                    if(joueur.getPosition()==1){
                        tete1.setText(tete);
                    }
                    if(joueur.getPosition()==2){
                        tete2.setText(tete);
                    }
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).clear();
                    fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(fenetrePrincipalM.getPartieEncours().getLigneChoisie()).add(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1));
                    pos =fenetrePrincipalM.getPartieEncours().getLigneChoisie();
                    int col =0;
                    String cas="L"+pos+col;
                    switch (cas) {
                        case "L00":
                            L11.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L12.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L13.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L14.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L15.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L10":
                            L21.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L22.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L23.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L24.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L25.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L20":
                            L31.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L32.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L33.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L34.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L35.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        case "L30":
                            L41.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L42.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L43.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L44.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L45.setIcon(new ImageIcon(getClass().getResource("/images/cards/carteVide.png")));
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;

                        default:
                            System.out.println("Erreur");
                    }

                }else{
                    int col=fenetrePrincipalM.getPartieEncours().getListeLigneCarte().get(pos).size()-1;
                    String cas="L"+pos+col;
                    System.out.println(cas);
                    System.out.println(pos);
                    System.out.println(col);
                    switch (cas) {
                        case "L00":
                            L11.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L01":
                            L12.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L02":
                            L13.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L03":
                            L14.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L04":
                            L15.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L10":
                            L21.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L11":
                            L22.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L12":
                            L23.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L13":
                            L24.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L14":
                            L25.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L20":
                            L31.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L21":
                            L32.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L22":
                            L33.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L23":
                            L34.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L24":
                            L35.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L30":
                            L41.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L31":
                            L42.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L32":
                            L43.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L33":
                            L44.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        case "L34":
                            L45.setIcon(fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().get(joueur.getPosition()-1).getImage());
                            break;
                        default:
                            System.out.println("Erreur");
                    }
                }
                i++;
                for(int l=0;l<4;l++){
                    int nbTete= fenetrePrincipalM.getPartieEncours().calculerNbTeteLigne(l);
                    String tete=""+nbTete;
                    joueur.ajouterNbTete(nbTete);
                    if(l==0){
                        L16.setText(tete);
                    }
                    if(l==1){
                        L26.setText(tete);
                    }
                    if(l==2){
                        L36.setText(tete);
                    }
                    if(l==3){
                        L46.setText(tete);
                    }
                }

            }
            fenetrePrincipalM.getPartieEncours().getCartePlacerJoueur().clear();
            fenetrePrincipalM.getPartieEncours().ajouterManche();
            if(fenetrePrincipalM.getPartieEncours().getManche()>10){
                manche1.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
                manche2.setText(String.valueOf(fenetrePrincipalM.getPartieEncours().getManche()));
            }
            if(fenetrePrincipalM.getPartieEncours().partieTerminer()){
                fenetrePrincipalM.getPartieEncours().setJoueurGagnant();
                if(fenetrePrincipalM.getPartieEncours().getGagnant()==""){
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Egalité", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }
                else{
                    JOptionPane.showMessageDialog(fenetrePrincipalM, "Gagnant : \n "+fenetrePrincipalM.getPartieEncours().getGagnant()+"", "Partie Terminée !",
                            JOptionPane.WARNING_MESSAGE);
                    s1.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(0).getStatut());
                    s2.setText(fenetrePrincipalM.getPartieEncours().getJoueurs().get(1).getStatut());
                }

            }
        }
    }//GEN-LAST:event_m10MouseClicked

    private void m1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_m1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_m1MouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FenetrePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FenetrePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FenetrePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FenetrePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FenetrePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L11;
    private javax.swing.JLabel L12;
    private javax.swing.JLabel L13;
    private javax.swing.JLabel L14;
    private javax.swing.JLabel L15;
    private javax.swing.JLabel L16;
    private javax.swing.JLabel L21;
    private javax.swing.JLabel L22;
    private javax.swing.JLabel L23;
    private javax.swing.JLabel L24;
    private javax.swing.JLabel L25;
    private javax.swing.JLabel L26;
    private javax.swing.JLabel L31;
    private javax.swing.JLabel L32;
    private javax.swing.JLabel L33;
    private javax.swing.JLabel L34;
    private javax.swing.JLabel L35;
    private javax.swing.JLabel L36;
    private javax.swing.JLabel L41;
    private javax.swing.JLabel L42;
    private javax.swing.JLabel L43;
    private javax.swing.JLabel L44;
    private javax.swing.JLabel L45;
    private javax.swing.JLabel L46;
    private javax.swing.JLabel d1;
    private javax.swing.JLabel j2nbcarte;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JLabel m1;
    private javax.swing.JLabel m10;
    private javax.swing.JLabel m2;
    private javax.swing.JLabel m3;
    private javax.swing.JLabel m4;
    private javax.swing.JLabel m5;
    private javax.swing.JLabel m6;
    private javax.swing.JLabel m7;
    private javax.swing.JLabel m8;
    private javax.swing.JLabel m9;
    private javax.swing.JLabel manche1;
    private javax.swing.JLabel manche2;
    private javax.swing.JLabel nbC;
    private javax.swing.JLabel nom1;
    private javax.swing.JLabel nom2;
    private javax.swing.JLabel p1;
    private javax.swing.JLabel p2;
    private javax.swing.JLabel s1;
    private javax.swing.JLabel s2;
    private javax.swing.JLabel tete1;
    private javax.swing.JLabel tete2;
    // End of variables declaration//GEN-END:variables

    public static FenetrePrincipal fenetrePrincipalM;
    public static FenetrePrincipal getFenetrePrincipal() {
        return fenetrePrincipalM;
    }

    public static void setFenetrePrincipal(FenetrePrincipal fenetrePrincipal) {
        fenetrePrincipalM = fenetrePrincipal;
    }

    private Partie partieEncours;
    public Partie getPartieEncours() {
        return partieEncours;
    }

    public void setPartieEncours(Partie partieEncours) {
        this.partieEncours = partieEncours;
    }
}

